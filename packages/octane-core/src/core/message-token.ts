import base58 from "bs58";
import nacl from "tweetnacl";
import { Keypair, Message, VersionedMessage, PublicKey } from "@solana/web3.js";

function bufferToSign(serializedMessage: Buffer | Uint8Array): Buffer {
  return Buffer.concat([
    Buffer.from("octane-message-token", "utf-8"),

    serializedMessage,
  ]);
}

/**
 * MessageToken generates and validates signatures for transaction payloads. It should be used to prove
 * authenticity of generated transactions, when some transaction claimed to be generated by Octane is submitted
 * by an untrusted source.
 */
export class MessageToken {
  message: Message | VersionedMessage;
  keypair: Keypair;

  constructor(message: Message | VersionedMessage, keypair: Keypair) {
    this.message = message;
    this.keypair = keypair;
  }

  compile(): string {
    const buffer = bufferToSign(this.message.serialize());
    const signature = nacl.sign.detached(buffer, this.keypair.secretKey);
    return base58.encode(signature);
  }

  static isValid(
    message: Message | VersionedMessage,
    token: string,
    publicKey: PublicKey,
  ): boolean {
    if (!token) {
      return false;
    }
    const buffer = bufferToSign(message.serialize());
    const signature = base58.decode(token);
    return nacl.sign.detached.verify(buffer, signature, publicKey.toBuffer());
  }
}
